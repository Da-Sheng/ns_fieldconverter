{"version":3,"sources":["../src/SelectByRequestValueConverter.es6"],"names":["FormItem","Item","logger","getLogger","Option","SelectByRequestValueConverter","option","getFieldProps","field","fieldOptions","wrapper","obj","dataType","transformSelectRequestValue","selectOptionss","requestSelectValue","forEach","push","key","value","name","select","state","defaultSelectValue","width","placeholder"],"mappings":";;;;;;;;qjBAAA;;;;;;AAIA;;;;AACA;;AAqBA;;;;;;;;AAFA,IAAMA,WAAW,WAAKC,IAAtB;;AAKA,IAAMC,SAAS,oBAAOC,SAAP,CAAiB,+BAAjB,CAAf;AACA,IAAMC,SAAS,aAAOA,MAAtB;;IAEMC,6B;;;;;;;4BAEIC,M,EAAQ;AAAA,UACPC,aADO,GAC6CD,MAD7C,CACPC,aADO;AAAA,UACQC,KADR,GAC6CF,MAD7C,CACQE,KADR;AAAA,UACeC,YADf,GAC6CH,MAD7C,CACeG,YADf;AAAA,UAC6BC,OAD7B,GAC6CJ,MAD7C,CAC6BI,OAD7B;AAAA,UACsCC,GADtC,GAC6CL,MAD7C,CACsCK,GADtC;;;AAGd,cAAQH,MAAMI,QAAd;AACE,aAAK,sBAAL;AACE,iBAAO,KAAKC,2BAAL,CAAiCP,MAAjC,CAAP;AAFJ;AAID;;AAED;;;;;;;;gDAK4BA,M,EAAQ;AAAA,UAC3BC,aAD2B,GACyBD,MADzB,CAC3BC,aAD2B;AAAA,UACZC,KADY,GACyBF,MADzB,CACZE,KADY;AAAA,UACLC,YADK,GACyBH,MADzB,CACLG,YADK;AAAA,UACSE,GADT,GACyBL,MADzB,CACSK,GADT;AAAA,UACcD,OADd,GACyBJ,MADzB,CACcI,OADd;;;AAGlC,UAAII,iBAAiB,EAArB;AACA,UAAGN,MAAMO,kBAAT,EAA4B;AAC1BP,cAAMO,kBAAN,CAAyBC,OAAzB,CAAiC,UAACV,MAAD,EAAY;AAC3CQ,yBAAeG,IAAf,CAAoB;AAAC,kBAAD;AAAA,cAAQ,KAAKX,OAAOY,GAApB,EAAyB,OAAOZ,OAAOa,KAAvC;AAA+Cb,mBAAOc;AAAtD,WAApB;AACD,SAFD;AAGD;;AAED,UAAMC,SAAUV,IAAIW,KAAJ,CAAUC,kBAAV,GAA+B;AAAA;AAAA;AAC/B,gBAAK,OAD0B;AAE/B,iBAAO,EAAEC,OAAO,GAAT,EAFwB;AAG/B,uBAAahB,MAAMiB,WAHY;AAI/B,wBAAcjB,MAAMW;AAJW,WAK3BZ,cAAcC,MAAMU,GAApB,EAAyBT,YAAzB,CAL2B;AAO9BK;AAP8B,OAA/B,GAQU;AAAA;AAAA;AACV,gBAAK,OADK;AAEV,iBAAO,EAAEU,OAAO,GAAT,EAFG;AAGV,uBAAahB,MAAMiB;AAHT,WAINlB,cAAcC,MAAMU,GAApB,EAAyBT,YAAzB,CAJM;AAMTK;AANS,OAR1B;;AAiBA,aAAOJ,QAAQW,MAAR,EAAiBb,KAAjB,CAAP;AACD;;;;;;kBAGYH,6B","file":"SelectByRequestValueConverter.js","sourcesContent":["/**\n * Gonzo\n *  2017年03月28日11:39:04\n */\nimport React from 'react';\nimport {\n  Form,\n  Col,\n  Input,\n  Button,\n  DatePicker,\n  Select,\n  Table,\n  Icon,\n  Radio,\n  InputNumber,\n  Checkbox,\n  Modal,\n  message,\n  notification,\n  Affix,\n  Upload\n} from 'antd';\n\nconst FormItem = Form.Item;\n\nimport Logger from 'ns_logger';\n\n\nconst logger = Logger.getLogger('SelectByRequestValueConverter');\nconst Option = Select.Option;\n\nclass SelectByRequestValueConverter {\n\n  convert(option) {\n    const {getFieldProps, field, fieldOptions, wrapper, obj} = option;\n\n    switch (field.dataType) {\n      case 'selectByRequestValue':\n        return this.transformSelectRequestValue(option);\n    }\n  }\n\n  /**\n   * 将schema中的一列转换为下拉框\n   *\n   * @param field\n   */\n  transformSelectRequestValue(option) {\n    const {getFieldProps, field, fieldOptions, obj, wrapper} = option;\n\n    let selectOptionss = [];\n    if(field.requestSelectValue){\n      field.requestSelectValue.forEach((option) => {\n        selectOptionss.push(<Option key={option.key} value={option.value}>{option.name}</Option>);\n      });\n    }\n\n    const select = (obj.state.defaultSelectValue ? <Select\n                    size=\"large\"\n                    style={{ width: 200 }}\n                    placeholder={field.placeholder}\n                    initialValue={field.value}\n                    {...getFieldProps(field.key, fieldOptions) }\n                  >\n                    {selectOptionss}\n                  </Select> : <Select\n                    size=\"large\"\n                    style={{ width: 200 }}\n                    placeholder={field.placeholder}\n                    {...getFieldProps(field.key, fieldOptions) }\n                  >\n                    {selectOptionss}\n                  </Select>)\n\n    return wrapper(select , field);\n  }\n}\n\nexport default SelectByRequestValueConverter;\n"]}