{"version":3,"sources":["../src/RadioConverter.es6"],"names":["FormItem","Item","logger","getLogger","RadioGroup","Group","RadioConverter","option","getFieldProps","field","fieldOptions","wrapper","obj","dataType","transformRadioConverter","defalutRadio","radioOption","forEach","push","value","isDisabledRadio","label","props","form","getFieldDecorator","key","onChange","bind"],"mappings":";;;;;;;;qjBAAA;;;;;AAGA;;;;AACA;;AAqBA;;;;;;;;AAFA,IAAMA,WAAW,WAAKC,IAAtB;;AAKA,IAAMC,SAAS,oBAAOC,SAAP,CAAiB,gBAAjB,CAAf;AACA,IAAMC,aAAa,YAAMC,KAAzB;;IAEMC,c;;;;;;;4BAGIC,M,EAAQ;AAAA,UACPC,aADO,GAC6CD,MAD7C,CACPC,aADO;AAAA,UACQC,KADR,GAC6CF,MAD7C,CACQE,KADR;AAAA,UACeC,YADf,GAC6CH,MAD7C,CACeG,YADf;AAAA,UAC6BC,OAD7B,GAC6CJ,MAD7C,CAC6BI,OAD7B;AAAA,UACsCC,GADtC,GAC6CL,MAD7C,CACsCK,GADtC;;AAEd,cAAQH,MAAMI,QAAd;AACE,aAAK,OAAL;AACE,iBAAO,KAAKC,uBAAL,CAA6BP,MAA7B,CAAP;AAFJ;AAID;;AAED;;;;;;;;4CAKwBA,M,EAAQ;AAAA,UACvBC,aADuB,GAC6BD,MAD7B,CACvBC,aADuB;AAAA,UACRC,KADQ,GAC6BF,MAD7B,CACRE,KADQ;AAAA,UACDC,YADC,GAC6BH,MAD7B,CACDG,YADC;AAAA,UACaE,GADb,GAC6BL,MAD7B,CACaK,GADb;AAAA,UACkBD,OADlB,GAC6BJ,MAD7B,CACkBI,OADlB;;;AAG9B,UAAII,eAAe,EAAnB;;AAEAN,YAAMO,WAAN,CAAkBC,OAAlB,CAA0B,UAACV,MAAD,EAAY;AACpCQ,qBAAaG,IAAb,CAAmB;AAAA;AAAA,YAAO,KAAKX,OAAOY,KAAnB,EAA0B,OAAOZ,OAAOY,KAAxC,EAA+C,UAAUP,IAAIQ,eAA7D;AAAgFb,iBAAOc;AAAvF,SAAnB;AACD,OAFD;;AAIA,aAAOV,qBAAaC,IAAIU,KAAJ,CAAUC,IAAV,CAAeC,iBAAf,CAAiCf,MAAMgB,GAAvC,EAA2Cf,YAA3C,EACX;AAAC,kBAAD;AAAA,UAAY,cAAcD,MAAMU,KAAhC,EAAuC,UAAUV,MAAMiB,QAAN,IAAkBjB,MAAMiB,QAAN,CAAeC,IAAf,CAAoBlB,KAApB,CAAnE;AACEM;AADF,OADW,CAAb,GAILN,KAJK,CAAP;AAKA;AACA;AACA;AACA;AACA;AACD;;;;;;kBAIYH,c","file":"RadioConverter.js","sourcesContent":["/**\n * Created by zxh on 2016/12/12.\n */\nimport React from 'react';\nimport {\n  Form,\n  Col,\n  Input,\n  Button,\n  DatePicker,\n  Select,\n  Table,\n  Icon,\n  Radio,\n  InputNumber,\n  Checkbox,\n  Modal,\n  message,\n  notification,\n  Affix,\n  Upload,\n} from 'antd';\n\nconst FormItem = Form.Item;\n\nimport Logger from 'ns_logger';\n\n\nconst logger = Logger.getLogger('RadioConverter');\nconst RadioGroup = Radio.Group;\n\nclass RadioConverter {\n\n\n  convert(option) {\n    const {getFieldProps, field, fieldOptions, wrapper, obj} = option;\n    switch (field.dataType) {\n      case 'radio':\n        return this.transformRadioConverter(option);\n    }\n  }\n\n  /**\n    * 将schema中的一列转换为下拉框\n    *\n    * @param field\n    */\n  transformRadioConverter(option) {\n    const {getFieldProps, field, fieldOptions, obj, wrapper} = option;\n\n    let defalutRadio = [];\n\n    field.radioOption.forEach((option) => {\n      defalutRadio.push( <Radio key={option.value} value={option.value} disabled={obj.isDisabledRadio} >{option.label}</Radio>);\n    });\n\n    return wrapper(({...obj.props.form.getFieldDecorator(field.key,fieldOptions)\n            (<RadioGroup initialValue={field.value} onChange={field.onChange && field.onChange.bind(field)}>\n              {defalutRadio}\n            </RadioGroup>)})\n    , field);\n    // return wrapper((\n    //         <RadioGroup {...getFieldProps(field.key, fieldOptions) } value={obj.state.radioValue}>\n    //         {defalutRadio}\n    //         </RadioGroup>\n    // ), field);\n  }\n\n}\n\nexport default RadioConverter;\n"]}