{"version":3,"sources":["../src/CheckboxConverter.es6"],"names":["FormItem","Item","logger","getLogger","Option","CheckboxGroup","Group","CheckboxConverter","option","getFieldProps","field","fieldOptions","wrapper","obj","dataType","transformCheckboxConverter","defalutCheckOptions","defalutCheck","forEach","push","label","value","props","form","getFieldDecorator","key","onCheckBoxChange"],"mappings":";;;;;;;;qjBAAA;;;;;AAGA;;;;AACA;;AAqBA;;;;;;;;AAFA,IAAMA,WAAW,WAAKC,IAAtB;;AAIA,IAAMC,SAAS,oBAAOC,SAAP,CAAiB,mBAAjB,CAAf;AACA,IAAMC,SAAS,aAAOA,MAAtB;AACA,IAAMC,gBAAgB,eAASC,KAA/B;;IAEMC,iB;;;;;;;4BAEIC,M,EAAQ;AAAA,UACPC,aADO,GAC6CD,MAD7C,CACPC,aADO;AAAA,UACQC,KADR,GAC6CF,MAD7C,CACQE,KADR;AAAA,UACeC,YADf,GAC6CH,MAD7C,CACeG,YADf;AAAA,UAC6BC,OAD7B,GAC6CJ,MAD7C,CAC6BI,OAD7B;AAAA,UACsCC,GADtC,GAC6CL,MAD7C,CACsCK,GADtC;;AAEd,cAAQH,MAAMI,QAAd;AACE,aAAK,UAAL;AACE,iBAAO,KAAKC,0BAAL,CAAgCP,MAAhC,CAAP;AAFJ;AAID;;AAED;;;;;;;;+CAK2BA,M,EAAQ;AAAA,UAC1BC,aAD0B,GAC0BD,MAD1B,CAC1BC,aAD0B;AAAA,UACXC,KADW,GAC0BF,MAD1B,CACXE,KADW;AAAA,UACJC,YADI,GAC0BH,MAD1B,CACJG,YADI;AAAA,UACUE,GADV,GAC0BL,MAD1B,CACUK,GADV;AAAA,UACeD,OADf,GAC0BJ,MAD1B,CACeI,OADf;;;AAGjC,UAAII,sBAAsB,EAA1B;AACAN,YAAMO,YAAN,CAAmBC,OAAnB,CAA2B,UAACV,MAAD,EAAY;AACrCQ,4BAAoBG,IAApB,CAAyB,EAAC,SAAUX,OAAOY,KAAlB,EAAyB,SAAUZ,OAAOa,KAA1C,EAAzB;AACD,OAFD;;AAKA,aAAOT,qBACDC,IAAIS,KAAJ,CAAUC,IAAV,CAAeC,iBAAf,CAAiCd,MAAMe,GAAvC,EAA2Cd,YAA3C,EAAyD,8BAAC,aAAD,IAAe,SAASK,mBAAxB,EAA6C,UAAUH,IAAIa,gBAA3D,GAAzD,CADC,GAEJhB,KAFI,CAAP;AAGD;;;;;;kBAIYH,iB","file":"CheckboxConverter.js","sourcesContent":["/**\n * Created by zxh on 2016/12/12.\n */\nimport React from 'react';\nimport {\n  Form,\n  Col,\n  Input,\n  Button,\n  DatePicker,\n  Select,\n  Table,\n  Icon,\n  Radio,\n  InputNumber,\n  Checkbox,\n  Modal,\n  message,\n  notification,\n  Affix,\n  Upload,\n} from 'antd';\n\nconst FormItem = Form.Item;\n\nimport Logger from 'ns_logger'\n\nconst logger = Logger.getLogger('CheckboxConverter');\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\nclass CheckboxConverter {\n\n  convert(option) {\n    const {getFieldProps, field, fieldOptions, wrapper, obj} = option;\n    switch (field.dataType) {\n      case 'checkbox':\n        return this.transformCheckboxConverter(option);\n    }\n  }\n\n  /**\n    * 将schema中的一列转换为下拉框\n    *\n    * @param field\n    */\n  transformCheckboxConverter(option) {\n    const {getFieldProps, field, fieldOptions, obj, wrapper} = option;\n\n    let defalutCheckOptions = [];\n    field.defalutCheck.forEach((option) => {\n      defalutCheckOptions.push({'label' : option.label, 'value' : option.value});\n    });\n\n\n    return wrapper((\n      {...obj.props.form.getFieldDecorator(field.key,fieldOptions)(<CheckboxGroup options={defalutCheckOptions} onChange={obj.onCheckBoxChange}  />)}\n    ), field);\n  }\n\n}\n\nexport default CheckboxConverter;\n"]}